replicaCount: 1
image:
  repository: atlassian/confluence
  pullPolicy: IfNotPresent
  #tag: "7.19.18"
  tag: "9.0.1"  
serviceAccount:
  create: true
  name:
  imagePullSecrets: []
  annotations: {}
  role:
    create: true
  clusterRole:
    create: true
    name:
  roleBinding:
    create: true
  clusterRoleBinding:
    create: true
    name:
  eksIrsa:
    roleArn:

database:
  type: postgresql
  url: 'jdbc:postgresql://pgatlaciandb-primary.confluence.svc:5432/confluence_db'
  credentials:
    secretName: confluence-db
    usernameSecretKey: username
    passwordSecretKey: password

volumes:
  localHome:
    persistentVolumeClaim:
      create: true
      storageClassName: local-path
      resources:
        requests:
          storage: 1Gi
    customVolume: {}
    mountPath: "/var/atlassian/application-data/confluence"

  sharedHome:
    persistentVolumeClaim:
      create: false
    customVolume:
      persistentVolumeClaim:
        claimName: confluence-shared-home
    mountPath: "/var/atlassian/application-data/shared-home"
    subPath:
    nfsPermissionFixer:
      enabled: true
      mountPath: "/shared-home"
      imageRepo: alpine
      imageTag: latest
      command:

  synchronyHome:
    persistentVolumeClaim:
      create: true
      storageClassName: local-path
      resources:
        requests:
          storage: 5Gi
    customVolume: { }
    mountPath: "/var/atlassian/application-data/confluence"
  additional: []
  additionalSynchrony: []
  defaultPermissionsMode: 484

ingress:
  create: false
  host: 

confluence:
  service:
    port: 80
    type: ClusterIP
    loadBalancerIP:
    annotations: {}
  securityContextEnabled: true
  securityContext:
    fsGroup: 2002
  containerSecurityContext: {}
  umask: "0022"
  setPermissions: true
  ports:
    http: 8090
    hazelcast: 5701
  license:
    secretName: 
    secretKey: license-key
  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 5
    failureThreshold: 6
  accessLog:
    enabled: true
    mountPath: "/opt/atlassian/confluence/logs"
    localHomeSubPath: "logs"
  clustering:
    enabled: true
    usePodNameAsClusterNodeName: true
  s3AttachmentsStorage:
    bucketName:
    bucketRegion:
    endpointOverride:
  resources:
    jvm:
      maxHeap: "1g"
      minHeap: "1g"
      reservedCodeCache: "256m"
    container:
      requests:
        cpu: "250m"
        memory: "1G"
  shutdown:
    terminationGracePeriodSeconds: 25
    command: "/shutdown-wait.sh"
  forceConfigUpdate: true
  additionalJvmArgs: []
  additionalLibraries: []
  additionalBundledPlugins: []
  additionalVolumeMounts: []
  additionalEnvironmentVariables:
  - name: ATL_FORCE_CFG_UPDATE
    value: "true"
  additionalPorts: []
  additionalVolumeClaimTemplates: []
  #additionalCertificates:
    #secretName: confluence-ca
    #customCmd: set -e; cp $JAVA_HOME/lib/security/cacerts /var/ssl/cacerts; chmod 664 /var/ssl/cacerts; for crt in /tmp/crt/certs; do echo "Adding $crt to keystore"; keytool -import - keystore /var/ssl/cacerts -storepass changeit -noprompt -alias $(echo $(basename $crt)) -file $crt; done;  
  topologySpreadConstraints: []
  jvmDebug:
    enabled: false

synchrony:
  enabled: true
  replicaCount: 1
  podAnnotations: {}
  service:
    port: 80
    type: ClusterIP
    loadBalancerIP:
    annotations: {}
  securityContextEnabled: true
  securityContext:
    fsGroup: 2002
  containerSecurityContext: {}
  setPermissions: true
  ports:
    http: 8091
    hazelcast: 5701
  readinessProbe:
    healthcheckPath: "/synchrony/heartbeat"
    initialDelaySeconds: 5
    periodSeconds: 1
    failureThreshold: 10
  resources:
    jvm:
      minHeap: "1g"
      maxHeap: "2g"
      stackSize: "2048k"
    container:
      requests:
        cpu: "250m"
        memory: "1G"
  additionalJvmArgs: []
  shutdown:
    terminationGracePeriodSeconds: 25
  additionalLibraries: []
  additionalVolumeMounts: []
  additionalPorts: []
  #additionalCertificates:
    #secretName: confluence-ca
    #customCmd: set -e; cp $JAVA_HOME/lib/security/cacerts /var/ssl/cacerts; chmod 664 /var/ssl/cacerts; for crt in /tmp/crt/certs; do echo "Adding $crt to keystore"; keytool -import - keystore /var/ssl/cacerts -storepass changeit -noprompt -alias $(echo $(basename $crt)) -file $crt; done;  
  topologySpreadConstraints: []

monitoring:
  exposeJmxMetrics: false
  jmxExporterInitContainer:
    runAsRoot: true
    customSecurityContext: {}
    resources: {}
  jmxServiceAnnotations: {}
  fetchJmxExporterJar: true
  jmxExporterImageRepo: bitnami/jmx-exporter
  jmxExporterImageTag: 0.18.0
  jmxExporterPort: 9999
  jmxExporterPortType: ClusterIP
  jmxExporterCustomJarLocation:
  jmxExporterCustomConfig: {}
  serviceMonitor:
    create: false
    prometheusLabelSelector: {}
      # release: prometheus
    scrapeIntervalSeconds: 30

openshift:
  runWithRestrictedSCC: false
